// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: page.sql

package sqlc

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const getPageByDomainId = `-- name: GetPageByDomainId :many
SELECT url, id FROM pages WHERE domain_id = $1 ORDER BY url LIMIT 20 OFFSET (($2 - 1) * 20)
`

type GetPageByDomainIdParams struct {
	DomainID uuid.UUID
	Column2  interface{}
}

type GetPageByDomainIdRow struct {
	Url string
	ID  uuid.UUID
}

func (q *Queries) GetPageByDomainId(ctx context.Context, arg GetPageByDomainIdParams) ([]GetPageByDomainIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getPageByDomainId, arg.DomainID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPageByDomainIdRow
	for rows.Next() {
		var i GetPageByDomainIdRow
		if err := rows.Scan(&i.Url, &i.ID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPageIdByUrl = `-- name: GetPageIdByUrl :one
SELECT id FROM pages WHERE url = $1
`

func (q *Queries) GetPageIdByUrl(ctx context.Context, url string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getPageIdByUrl, url)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertPage = `-- name: InsertPage :exec
INSERT INTO pages (url, domain_id) VALUES ($1, $2)
`

type InsertPageParams struct {
	Url      string
	DomainID uuid.UUID
}

func (q *Queries) InsertPage(ctx context.Context, arg InsertPageParams) error {
	_, err := q.db.ExecContext(ctx, insertPage, arg.Url, arg.DomainID)
	return err
}

const insertPageReferral = `-- name: InsertPageReferral :exec
INSERT INTO page_referral (page_id, referral_id) VALUES ($1, $2) ON CONFLICT DO NOTHING
`

type InsertPageReferralParams struct {
	PageID     uuid.UUID
	ReferralID uuid.UUID
}

func (q *Queries) InsertPageReferral(ctx context.Context, arg InsertPageReferralParams) error {
	_, err := q.db.ExecContext(ctx, insertPageReferral, arg.PageID, arg.ReferralID)
	return err
}

const isExistPage = `-- name: IsExistPage :one
SELECT EXISTS(SELECT 1 FROM pages WHERE url = $1)
`

func (q *Queries) IsExistPage(ctx context.Context, url string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isExistPage, url)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updatePageData = `-- name: UpdatePageData :one
UPDATE pages SET title = $2, meta_data = $3 WHERE url = $1 RETURNING id
`

type UpdatePageDataParams struct {
	Url      string
	Title    string
	MetaData json.RawMessage
}

func (q *Queries) UpdatePageData(ctx context.Context, arg UpdatePageDataParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updatePageData, arg.Url, arg.Title, arg.MetaData)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updatePageWordCount = `-- name: UpdatePageWordCount :exec
UPDATE pages SET word_count = $2, is_indexed = TRUE WHERE url = $1
`

type UpdatePageWordCountParams struct {
	Url       string
	WordCount int32
}

func (q *Queries) UpdatePageWordCount(ctx context.Context, arg UpdatePageWordCountParams) error {
	_, err := q.db.ExecContext(ctx, updatePageWordCount, arg.Url, arg.WordCount)
	return err
}
