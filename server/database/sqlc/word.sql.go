// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: word.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const getWordId = `-- name: GetWordId :one
SELECT id FROM words WHERE word = $1
`

func (q *Queries) GetWordId(ctx context.Context, word string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getWordId, word)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertWord = `-- name: InsertWord :one
INSERT INTO words (word) VALUES ($1) ON CONFLICT (word) DO NOTHING RETURNING id
`

func (q *Queries) InsertWord(ctx context.Context, word string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, insertWord, word)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertWordPage = `-- name: InsertWordPage :exec
INSERT INTO word_page (word_id, page_id, word_count) VALUES ($1, $2, $3)
`

type InsertWordPageParams struct {
	WordID    uuid.UUID
	PageID    uuid.UUID
	WordCount int32
}

func (q *Queries) InsertWordPage(ctx context.Context, arg InsertWordPageParams) error {
	_, err := q.db.ExecContext(ctx, insertWordPage, arg.WordID, arg.PageID, arg.WordCount)
	return err
}
