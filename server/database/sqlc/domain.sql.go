// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: domain.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const deleteDomain = `-- name: DeleteDomain :exec
DELETE FROM domains WHERE domain = $1
`

func (q *Queries) DeleteDomain(ctx context.Context, domain string) error {
	_, err := q.db.ExecContext(ctx, deleteDomain, domain)
	return err
}

const insertDomain = `-- name: InsertDomain :one
INSERT INTO domains (domain) VALUES ($1) RETURNING id
`

func (q *Queries) InsertDomain(ctx context.Context, domain string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, insertDomain, domain)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const isExistDomain = `-- name: IsExistDomain :one
SELECT EXISTS(SELECT 1 FROM domains WHERE domain = $1)
`

func (q *Queries) IsExistDomain(ctx context.Context, domain string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isExistDomain, domain)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
